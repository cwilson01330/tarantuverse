"""Initial migration

Revision ID: 9588b399ad54
Revises: 
Create Date: 2025-10-05 20:52:13.935868

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '9588b399ad54'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # Create enum types
    carelevel_enum = postgresql.ENUM('BEGINNER', 'INTERMEDIATE', 'ADVANCED', name='carelevel')
    carelevel_enum.create(op.get_bind(), checkfirst=True)

    sex_enum = postgresql.ENUM('MALE', 'FEMALE', 'UNKNOWN', name='sex')
    sex_enum.create(op.get_bind(), checkfirst=True)

    source_enum = postgresql.ENUM('BRED', 'BOUGHT', 'WILD_CAUGHT', name='source')
    source_enum.create(op.get_bind(), checkfirst=True)

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('species',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('scientific_name', sa.String(length=255), nullable=False),
    sa.Column('common_names', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('genus', sa.String(length=100), nullable=True),
    sa.Column('care_level', postgresql.ENUM('BEGINNER', 'INTERMEDIATE', 'ADVANCED', name='carelevel', create_type=False), nullable=True),
    sa.Column('temperament', sa.String(length=100), nullable=True),
    sa.Column('native_region', sa.String(length=200), nullable=True),
    sa.Column('adult_size', sa.String(length=50), nullable=True),
    sa.Column('growth_rate', sa.String(length=50), nullable=True),
    sa.Column('care_guide', sa.Text(), nullable=True),
    sa.Column('image_url', sa.String(length=500), nullable=True),
    sa.Column('searchable', postgresql.TSVECTOR(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_species_genus'), 'species', ['genus'], unique=False)
    op.create_index(op.f('ix_species_scientific_name'), 'species', ['scientific_name'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('display_name', sa.String(length=100), nullable=True),
    sa.Column('avatar_url', sa.String(length=500), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('is_breeder', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_superuser', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('tarantulas',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('species_id', sa.UUID(), nullable=True),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('common_name', sa.String(length=100), nullable=True),
    sa.Column('scientific_name', sa.String(length=255), nullable=True),
    sa.Column('sex', postgresql.ENUM('MALE', 'FEMALE', 'UNKNOWN', name='sex', create_type=False), nullable=True),
    sa.Column('date_acquired', sa.Date(), nullable=True),
    sa.Column('source', postgresql.ENUM('BRED', 'BOUGHT', 'WILD_CAUGHT', name='source', create_type=False), nullable=True),
    sa.Column('price_paid', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('enclosure_size', sa.String(length=50), nullable=True),
    sa.Column('substrate_type', sa.String(length=100), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['species_id'], ['species.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('feeding_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('tarantula_id', sa.UUID(), nullable=False),
    sa.Column('fed_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('food_type', sa.String(length=100), nullable=True),
    sa.Column('food_size', sa.String(length=50), nullable=True),
    sa.Column('accepted', sa.Boolean(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['tarantula_id'], ['tarantulas.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('molt_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('tarantula_id', sa.UUID(), nullable=False),
    sa.Column('molted_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('premolt_started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('leg_span_before', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('leg_span_after', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('weight_before', sa.Numeric(precision=6, scale=2), nullable=True),
    sa.Column('weight_after', sa.Numeric(precision=6, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('image_url', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['tarantula_id'], ['tarantulas.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('photos',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('tarantula_id', sa.UUID(), nullable=False),
    sa.Column('url', sa.String(length=500), nullable=False),
    sa.Column('thumbnail_url', sa.String(length=500), nullable=True),
    sa.Column('caption', sa.Text(), nullable=True),
    sa.Column('taken_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['tarantula_id'], ['tarantulas.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('photos')
    op.drop_table('molt_logs')
    op.drop_table('feeding_logs')
    op.drop_table('tarantulas')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_species_scientific_name'), table_name='species')
    op.drop_index(op.f('ix_species_genus'), table_name='species')
    op.drop_table('species')

    # Drop enum types
    postgresql.ENUM(name='source').drop(op.get_bind(), checkfirst=True)
    postgresql.ENUM(name='sex').drop(op.get_bind(), checkfirst=True)
    postgresql.ENUM(name='carelevel').drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
